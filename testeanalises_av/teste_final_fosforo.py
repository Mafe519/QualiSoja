#!/usr/bin/env python
"""
Teste da nova implementa√ß√£o simplificada de f√≥sforo
"""
import os
import sys
import django

# Configurar Django
sys.path.append('c:/Users/rodri/qualisoja')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qualisoja.settings')
django.setup()

from decimal import Decimal
from analises.models import AnaliseFosforo

def testar_calculo_simplificado():
    """Teste do c√°lculo simplificado"""
    print("=== TESTE DO C√ÅLCULO SIMPLIFICADO DE F√ìSFORO ===")
    print("Apenas a absorb√¢ncia da amostra √© inserida, outros valores s√£o padr√£o")
    print()
    
    # Teste com valor de absorb√¢ncia
    absorbancia_teste = Decimal('0.125')
    
    print("Dados do teste:")
    print(f"  Absorb√¢ncia da amostra: {absorbancia_teste}")
    print("  Peso da amostra: 1.0000g (padr√£o)")
    print("  Concentra√ß√£o padr√£o: 10.0000 mg/L (padr√£o)")
    print("  Volume da solu√ß√£o: 100.00 mL (padr√£o)")
    print("  Volume da al√≠quota: 10.00 mL (padr√£o)")
    print("  Absorb√¢ncia do padr√£o: 0.250000 (padr√£o)")
    print()
    
    # F√≥rmula completa
    aa = absorbancia_teste
    cp = Decimal('10.0000')
    v = Decimal('100.00')
    p = Decimal('1.0000')
    val = Decimal('10.00')
    ap = Decimal('0.250000')
    
    numerador = aa * cp * v * Decimal('1000') * Decimal('1000')
    denominador = p * val * ap
    resultado_formula = numerador / denominador
    
    print("C√°lculo usando f√≥rmula completa:")
    print(f"  ({aa} √ó {cp} √ó {v} √ó 1000 √ó 1000) / ({p} √ó {val} √ó {ap})")
    print(f"  = {numerador} / {denominador}")
    print(f"  = {resultado_formula:.2f} ppm")
    print()
    
    # F√≥rmula simplificada
    # (Aa √ó 10.0 √ó 100.0 √ó 1000 √ó 1000) / (1.0 √ó 10.0 √ó 0.25)
    # = Aa √ó 10000000000 / 2.5
    # = Aa √ó 4000000
    resultado_simplificado = aa * Decimal('4000000')
    print("C√°lculo usando f√≥rmula simplificada:")
    print(f"  {aa} √ó 4.000.000 = {resultado_simplificado:.2f} ppm")
    print()
    
    # Testar no modelo
    try:
        analise = AnaliseFosforo(
            absorbancia_amostra=absorbancia_teste,
            casas_decimais=0  # Definir 0 casas decimais (n√∫mero inteiro)
        )
        analise.save()
        
        print(f"Resultado do modelo Django: {analise.resultado} ppm")
        print(f"Resultado formatado: {analise.get_resultado_formatado()} ppm")
        print(f"Casas decimais configuradas: {analise.casas_decimais} (n√∫mero inteiro)")
        print("‚úÖ Teste realizado com sucesso!")
        
        # Verificar se os resultados coincidem
        if abs(float(analise.resultado) - float(resultado_formula)) < 0.01:
            print("‚úÖ Os c√°lculos coincidem!")
        else:
            print("‚ùå Diferen√ßa nos c√°lculos detectada!")
        
        # Limpar teste
        analise.delete()
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        import traceback
        traceback.print_exc()

def testar_varios_valores():
    """Teste com v√°rios valores de absorb√¢ncia e avalia√ß√£o"""
    print("\n=== TESTE COM V√ÅRIOS VALORES E AVALIA√á√ÉO ===")
    
    valores_teste = [
        (0.000010, "√ìTIMO - Abaixo de 80 ppm"),
        (0.000015, "√ìTIMO - Abaixo de 80 ppm"), 
        (0.000020, "BOM - Entre 80 e 180 ppm"),
        (0.000030, "BOM - Entre 80 e 180 ppm"),
        (0.000045, "BOM - Entre 80 e 180 ppm"),
        (0.000050, "RUIM - Acima de 180 ppm"),
        (0.000100, "RUIM - Acima de 180 ppm")
    ]
    
    print("| Absorb√¢ncia | Resultado (ppm) | Avalia√ß√£o |")
    print("|-------------|-----------------|-----------|")
    
    for valor, descricao in valores_teste:
        resultado = valor * 4000000
        if resultado < 80:
            status = "√ìTIMO"
        elif 80 <= resultado <= 180:
            status = "BOM"
        else:
            status = "RUIM"
        
        print(f"|  {valor:.6f}  |   {resultado:>7.2f}     |   {status:<6} |")
    
    print("\nüìä CRIT√âRIOS DE AVALIA√á√ÉO:")
    print("- √ìTIMO: Abaixo de 80 ppm")
    print("- BOM: Entre 80 e 180 ppm") 
    print("- RUIM: Acima de 180 ppm")
    print("\nüí° DICA: Para obter valores na faixa ideal (80-180 ppm):")
    print("   Digite absorb√¢ncias entre 0.000020 e 0.000045")

def testar_casas_decimais():
    """Teste para demonstrar o controle de casas decimais"""
    print("\n=== TESTE DE CASAS DECIMAIS ===")
    
    absorbancia_teste = Decimal('0.000025')  # Valor que d√° resultado ~100 ppm
    
    print(f"Absorb√¢ncia de teste: {absorbancia_teste}")
    print("Testando diferentes configura√ß√µes de casas decimais:")
    print()
    
    for casas in [0, 1, 2, 3]:
        try:
            analise = AnaliseFosforo(
                absorbancia_amostra=absorbancia_teste,
                casas_decimais=casas
            )
            analise.save()
            
            if casas == 0:
                print(f"‚Ä¢ {casas} casas decimais (n√∫mero inteiro): {analise.get_resultado_formatado()} ppm")
            else:
                print(f"‚Ä¢ {casas} casa{'s' if casas > 1 else ''} decimal{'is' if casas > 1 else ''}: {analise.get_resultado_formatado()} ppm")
            
            analise.delete()
            
        except Exception as e:
            print(f"‚ùå Erro com {casas} casas decimais: {e}")
    
    print("\nüí° Padr√£o: 0 casas decimais (n√∫meros inteiros)")
    print("üí° Todos os par√¢metros da f√≥rmula podem ser alterados no formul√°rio!")

if __name__ == '__main__':
    try:
        testar_calculo_simplificado()
        testar_varios_valores()
        testar_casas_decimais()
        print("\nüéâ Todos os testes conclu√≠dos com sucesso!")
        print("\nüìù RESUMO:")
        print("- O usu√°rio digita a absorb√¢ncia da amostra")
        print("- O sistema multiplica por 4.000.000 para obter o resultado em ppm")
        print("- Resultado padr√£o: n√∫mero inteiro (0 casas decimais)")
        print("- Todos os par√¢metros podem ser alterados conforme necess√°rio")
        print("- Casas decimais podem ser ajustadas de 0 a 6")
        
    except Exception as e:
        print(f"üí• Erro geral: {e}")
        import traceback
        traceback.print_exc()
